public class SinglyLinkedList {
    private Node head;

    private static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public void addFirst(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    public void deleteFirst() {
        if (head == null) {
            System.out.println("Can't delete; list is empty.");
        } else {
            head = head.next;
        }
    }

    public void deleteLast() {
        if (head == null || head.next == null) {
            head = null;
            return;
        }

        Node current = head;
        while (current.next.next != null) {
            current = current.next;
        }
        current.next = null;
    }

    public int size() {
        int count = 0;
        Node current = head;
        while (current != null) {
            count++;
            current = current.next;
        }
        return count;
    }

    public void reverseRecursive() {
        head = reverseRecursiveHelper(head);
    }

    private Node reverseRecursiveHelper(Node node) {
        if (node == null || node.next == null) {
            return node;
        }
        Node newHead = reverseRecursiveHelper(node.next);
        node.next.next = node;
        node.next = null;
        return newHead;
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();
        
  
        list.addFirst(100);
        list.addLast(200);
        list.addLast(204);
        list.addLast(2067);
        
         System.out.println("Linked List:");
        list.display();
        
        System.out.println("Size: " + list.size());

        list.deleteLast();
        list.deleteFirst();

        System.out.println("Size after deletion: " + list.size());

       
        list.reverseRecursive();

      
        System.out.println("Reversed Linked List:");
        list.display();

       
        System.out.println("Size after reversal: " + list.size());
    }
}
